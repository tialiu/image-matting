name: Create Release

on:
  push:
    branches:
      - main

      
jobs:
  create_tag:
    runs-on: ubuntu-latest
    outputs:
      created_tag: ${{ steps.compare_versions.outputs.created_tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          version=$(grep "^version" backend/pyproject.toml | sed -E 's/version = "(.*)"/\1/')
          echo "::set-output name=version::$version"

      - name: Get the latest tag (if exists)
        id: get_latest_tag
        run: |
          if git rev-parse "v0.0.0" >/dev/null 2>&1; then
            latest_tag=$(git describe --tags --abbrev=0)
          else
            latest_tag="v0.0.0"
          fi
          echo "::set-output name=tag::$latest_tag"

      - name: Compare versions
        id: compare_versions
        run: |
          if [ "v${{ steps.get_version.outputs.version }}" = "${{ steps.get_latest_tag.outputs.tag }}" ]; then
            echo "Version has not changed. Skipping tag creation."
            echo "::set-output name=created_tag::false"
            exit 0
          else
            echo "::set-output name=created_tag::true"
          fi

      - name: Create a new tag
        if: ${{ steps.compare_versions.outputs.created_tag == 'true' }}
        id: create_tag
        run: |
          git tag -a v${{ steps.get_version.outputs.version }} -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin v${{ steps.get_version.outputs.version }}
          echo "::set-output name=tag::v${{ steps.get_version.outputs.version }}"
  build-and-release:
    if: ${{ needs.create_tag.outputs.created_tag == 'true' }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.4'
    
    - name: Cache PDM packages
      uses: actions/cache@v3
      with:
        path: ~/.pdm/venv
        key: ${{ matrix.os }}-pdm-${{ hashFiles('**/pdm.lock') }}
        restore-keys: |
          ${{ matrix.os }}-pdm-
    
    - name: Install dependencies
      run: |
        cd backend
        pip install pdm
        pdm install

    - uses: pnpm/action-setup@v4
      name: Install pnpm
      with:
        version: 8
        run_install: false

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
         node-version: 20.11.0

    - name: Cache pnpm modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
        # 安装依赖
    - name: Install dependencies
      run: |
         cd frontend
         pnpm install

    - name: build frontend
      run: |
        cd backend
        pdm build-front

    - name: Cache downloaded files
      uses: actions/cache@v3
      with:
        path: ./hub_model/briaai
        key: ${{ runner.os }}-downloads-${{ hashFiles('hub_model/download.py') }}
    - name: Download files
      run: |
         cd backend
         pdm run python hub_model/download.py
    
    - name: Build with PyInstaller
      run: |
        cd backend
        pdm build-release
      
    - name: Create ZIP (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd backend/dist/release
        zip -r ../../mac-binary-image-matting-${{ github.ref_name }}.zip .
        cd ../../
      
    - name: Create ZIP (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: backend
      run: |
        Compress-Archive -Path .\dist\release\* -DestinationPath win-image-matting-${{ github.ref_name }}.zip
      shell: pwsh
      
    - name: Find Latest Release
      id: find_latest_release
      uses: octokit/request-action@v2
      with:
        route: GET /repos/{owner}/{repo}/releases/latest
        owner: ${{ github.repository_owner }}
        repo: ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Create Release if not exists
      id: create_release
      if: steps.find_latest_release.outputs.status_code == '404'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Image Matting ${{ github.ref_name }}
        draft: false
        prerelease: false

      
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.find_latest_release.outputs.upload_url || steps.create_release.outputs.upload_url }}
        asset_path: ./win-image-matting-${{ github.ref_name }}.zip
        asset_name: win-image-matting-${{ github.ref_name }}.zip
        asset_content_type: application/zip
      if: matrix.os == 'windows-latest'
    
    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.find_latest_release.outputs.upload_url || steps.create_release.outputs.upload_url }}
        asset_path: ./mac-binary-image-matting-${{ github.ref_name }}.zip
        asset_name: mac-binary-image-matting-${{ github.ref_name }}.zip
        asset_content_type: application/zip
      if: matrix.os == 'macos-latest'
