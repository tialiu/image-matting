name: Tag, Build, and Release

on:
  push:
    branches:
      - main

jobs:
  check-and-tag:
    runs-on: ubuntu-latest
    outputs:
      created_tag: ${{ steps.compare_versions.outputs.created_tag }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的历史记录，包括所有标签

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          version=$(grep "^version" backend/pyproject.toml | sed -E 's/version = "(.*)"/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare_versions
        run: |
          if [ "v${{ steps.get_version.outputs.version }}" = "${{ steps.get_latest_tag.outputs.latest_tag }}" ]; then
            echo "Version has not changed. Skipping tag creation."
            echo "created_tag=false" >> $GITHUB_OUTPUT
          else
            echo "created_tag=true" >> $GITHUB_OUTPUT
          fi

      - name: Create a new tag
        if: steps.compare_versions.outputs.created_tag == 'true'
        run: |
          git tag -a v${{ steps.get_version.outputs.version }} -m "Release v${{ steps.get_version.outputs.version }}"
          git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git v${{ steps.get_version.outputs.version }}

  tag-and-build:
    runs-on: ubuntu-latest
    needs: check-and-tag
    if: needs.check-and-tag.outputs.created_tag == 'true'
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.4'

      - name: Cache PDM packages
        uses: actions/cache@v3
        with:
          path: ~/.pdm/venv
          key: ${{ matrix.os }}-pdm-${{ hashFiles('**/pdm.lock') }}
          restore-keys: |
            ${{ matrix.os }}-pdm-

      - name: Install Python dependencies
        run: |
          cd backend
          pip install pdm
          pdm install

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.11.0

      - name: Cache pnpm modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install

      - name: Build frontend
        run: |
          cd backend
          pdm build-front

      - name: Cache downloaded files
        uses: actions/cache@v3
        with:
          path: ./hub_model/briaai
          key: ${{ runner.os }}-downloads-${{ hashFiles('hub_model/download.py') }}

      - name: Download files
        run: |
          cd backend
          pdm run python hub_model/download.py

      - name: Build with PyInstaller
        run: |
          cd backend
          pdm build-release

      - name: Create ZIP (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd backend/dist/release
          zip -r ../../mac-binary-image-matting-${{ needs.check-and-tag.outputs.version }}.zip .
          cd ../../

      - name: Create ZIP (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: backend
        run: |
          Compress-Archive -Path .\dist\release\* -DestinationPath win-image-matting-${{ needs.check-and-tag.outputs.version }}.zip
        shell: pwsh

  release:
    runs-on: ubuntu-latest
    needs: tag-and-build
    if: needs.check-and-tag.outputs.created_tag == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-and-tag.outputs.version }}
          release_name: Image Matting v${{ needs.check-and-tag.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./win-image-matting-${{ needs.check-and-tag.outputs.version }}.zip
          asset_name: win-image-matting-${{ needs.check-and-tag.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./mac-binary-image-matting-${{ needs.check-and-tag.outputs.version }}.zip
          asset_name: mac-binary-image-matting-${{ needs.check-and-tag.outputs.version }}.zip
          asset_content_type: application/zip
